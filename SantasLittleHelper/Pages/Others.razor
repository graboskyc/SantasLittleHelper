@page "/Others/{Event}"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<div class="container">

    <h1 class="page-title">üéÅ For Them üéÅ</h1>
    
    @if(gifts != null) {
        @foreach (var p in gifts)
        {
            <div class="card text-center" style="margin-bottom: 2rem;border-color:#A20025 !important;">
                <div class="card-header" style="background-color:#A20025 !important;color:#fff !important;">
                    @p._id.Split("@")[0].FirstCharToUpper()
                </div>
                <div class="card-body" style="padding:none !important;">
                    <table style="text-align:center;width:100%;font-size:24px;" class="table table-striped table-sm"><tbody>
                    @foreach (var g in p.giftList)
                    {
                        <tr>
                            <td>
                                @if(g.gift.StartsWith("http")) {
                                    <a href="@g.gift" target="_blank">
                                        Link
                                    </a>
                                } else if (g.link != null) {
                                    <a href="@g.link" target="_blank">
                                        @g.gift
                                    </a>
                                } else {
                                    <span>
                                        @g.gift
                                    </span>
                                }                                         
                            </td>
                            <td>
                                @if(g.cost != null) {
                                    if(g.cost.Length > 0) {
                                        <span class="badge rounded-pill bg-secondary">$@g.cost</span>
                                    }
                                }
                            </td>
                            <td width="84">
                                @if (g.deleted)
                                {
                                    <span class="oi oi-trash"></span>
                                } else if(g.purchasedBy != null) {
                                    @if(g.purchasedBy == user.email) {
                                        <button class="btn btn-dark btn-sm"  @onclick="@(e=>RunUnBuy(g._id))">Unbuy</button>
                                    } 
                                    else {
                                    <span class="btn btn-sm">Snagged!</span>
                                    }
                                } else {
                                    <button class="btn btn-santa-base btn-sm"  @onclick="@(e=>RunBuy(g._id))">Buy!</button>
                                }
                            </td>
                        </tr>
                    }
                    </tbody></table>
                </div>
            </div>
        }
    }

    <br><br><br><br><br><br><br><br>
</div>

@code {
    [Parameter]
    public string Event {get; set;}

    private RealmUser user = new RealmUser{};

     private class GiftPerson {
        public string _id {get; set;}
        public List<GiftItem> giftList {get; set;}
    }

    private class GiftItem {
        public string created {get; set;}
        public string _id {get; set;}
        public string gift {get;set;}
        public string link {get;set;}
        
        public string cost {get;set;}
        public string purchasedBy {get; set;}
        public bool deleted {get;set;}
    }
    private List<GiftPerson> gifts;

    private async Task GetGifts() {        
        string[] args = {Event};
        gifts = await JSRuntime.InvokeAsync<List<GiftPerson>>("realmShim_Function", "getAllGifts", args);
    }

    private async Task RunBuy(string id) {
        string[] args = { id };

        await JSRuntime.InvokeVoidAsync("realmShim_Function", "setPurchased", args);
        await GetGifts();
    }

    private async Task RunUnBuy(string id) {
        string[] args = { id };

        await JSRuntime.InvokeVoidAsync("realmShim_Function", "setUnPurchased", args);
        await GetGifts();
    }

   

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await JSRuntime.InvokeAsync<RealmUser>("getUserDetails");

            await GetGifts();
            
        } catch(Exception ex) {
            NavigationManager.NavigateTo("/");
        }
    }
}