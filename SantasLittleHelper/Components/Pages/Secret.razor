@layout MainLayout;
@page "/Secret"
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager


<div class="container" style="background-color:#fff;min-height:120vh !important;">
    <h1 class="page-title" style="color:#A20025;">Secret Santa Randomizer</h1>

    <div class="row">
        <div class="col-sm-6">
            <div class="card text-center" style="margin-bottom: 2rem;border-color:#A20025 !important;">
                <div class="card-header" style="background-color:#A20025 !important;color:#fff !important;font-size:1rem !important;">
                    Names
                </div>
                <div class="card-body">
                    <textarea id="txt_names" name="txt_names"  @bind="names" @bind:event="onchange" class="form-control form-control-lg" style="height: 10rem;font-size:18px;" ></textarea>
                </div>
            </div>
        </div>

        <div class="col-sm-6">
            <div class="card text-center" style="margin-bottom: 2rem;border-color:#A20025 !important;">
                <div class="card-header" style="background-color:#A20025 !important;color:#fff !important;font-size:1rem !important;">
                    Disallow
                </div>
                <div class="card-body">
                    <textarea id="txt_nopair" name="txt_nopair"  @bind="nopair" @bind:event="onchange" class="form-control form-control-lg"  style="height: 10rem;font-size:18px;"></textarea>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-1"></div>
        <div class="col-sm-10">
            <button class="btn btn-santa btn-lg"  @onclick="Run" id="btn_run">Simulate</button>
            <br><br>
        </div>
        <div class="col-sm-1"></div>
    </div>

    @if(ss != null) {
        <div class="row">
            <div class="col-sm-1"></div>
            <div class="col-sm-10">
                <table class="table table-striped" style="text-align: center;">
                    <thead>
                        <tr style="background-color:#A20025;color:#fff;font-weight:bold;">
                            <th>Giver</th>
                            <th>Reciever</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ss)
                        {
                            <tr>
                                <td>@item.giver</td>
                                <td>@item.reciever</td>
                            </tr>
                            
                        }
                    </tbody>
                </table>
            </div>
            <div class="col-sm-1"></div>
        </div>
    }
    <br><br><br><br><br><br>
</div>

@code {
    private string names, nopair = "";
    private List<PossiblePairs> ppl = null;
    private List<SecretSanta> ss = null;

    private class PossiblePairs {
        public string person {get;set;}
        public List<string> possibles {get;set;}
    }

    private class SecretSanta {
        public string giver {get;set;}
        public string reciever {get;set;}
    }

    private async Task Run() {
        string[] nlist = names.Split("\n");
        string[] dlist = nopair.Split("\n");
        int i = 0;

        ppl = new List<PossiblePairs>();
        ss = new List<SecretSanta>();

        // build structure and remove yourself and your spouse from each
        foreach(var n in nlist) {
            Console.WriteLine(n);
            var pp = new PossiblePairs {person = n, possibles=nlist.ToList()};
            pp.possibles.RemoveAll(val => val == n);
            string[] dListCSV = dlist[i].Split(",");
            foreach (var dlc in dListCSV) {
                pp.possibles.RemoveAll(val => val == dlc.Trim());
            }            
            pp.possibles.Shuffle();
            ppl.Add(pp);
            i++;
        }

        // its possible we box ourself into a corner so try/catch to redo
        try {
            // now we have a random list so do pairs
            foreach(var p in ppl) {
                // grab first random pair and make it so
                string r = p.possibles.First();
                var s = new SecretSanta {giver = p.person, reciever = r };
                ss.Add(s);

                //remove recipeient from all others
                for (int ct = 0; ct < ppl.Count(); ct++) {
                    ppl.ElementAt(ct).possibles.RemoveAll(val => val == r);
                    ppl.ElementAt(ct).possibles.Shuffle();
                }
            }
        } catch(Exception ex) {
            Console.WriteLine("NO VALID OPTIONS, TRYING AGAIN");
            Run();
        }

    }

}